{"version":3,"file":"static/js/606.2b66ce48.chunk.js","mappings":"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","sources":["components/modals/ProductEdit.js","components/modals/ProductView.js","components/datatables/ProductTables.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useQuery, useMutation, useQueryClient } from \"react-query\";\r\nimport { getAllSuppliers, putProduct } from \"../../api\";\r\nimport { ProductContext } from \"../../context/products/ProductProvider\";\r\n\r\nfunction ProductEdit({ data }) {\r\n  const queryClient = useQueryClient();\r\n\r\n  const { proState, proDispatch } = useContext(ProductContext);\r\n  const suppData = useQuery(\"suppliers\", getAllSuppliers);\r\n  const initialValues = {\r\n    id: data?.id,\r\n    name: data?.name,\r\n    price: data?.price,\r\n    quantity: data?.quantity,\r\n    supplier: data?.supplier,\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    name: Yup.string().required(\"Required*\"),\r\n    price: Yup.number()\r\n      .required(\"Required*\")\r\n      .min(0, \"invalid price\")\r\n      .positive(\"Invalid number\")\r\n      .integer(\"Invalid\"),\r\n\r\n    quantity: Yup.number()\r\n      .required(\"Required*\")\r\n      .min(0, \"invalid price\")\r\n      .integer(\"Invalid\"),\r\n    supplier: Yup.string().required(\"Required*\"),\r\n  });\r\n\r\n  const { mutateAsync } = useMutation(\"products\", putProduct, {\r\n    onMutate: (updatedProduct) => {\r\n      const oldProducts = queryClient.getQueryData(\"products\");\r\n      queryClient.setQueryData(\"products\", (oldProducts) => [\r\n        ...oldProducts,\r\n        updatedProduct,\r\n      ]);\r\n\r\n      return oldProducts;\r\n    },\r\n    onSettled: () => {\r\n      queryClient.invalidateQueries(\"products\");\r\n    },\r\n  });\r\n\r\n  const onSubmit = (values, options) => {\r\n    mutateAsync(values, {\r\n      onSuccess: () => {\r\n        options.setSubmitting(false);\r\n        alert(\"Changes Saved\");\r\n        // options.resetForm();\r\n        proDispatch({ type: \"showProductEditModal\", payload: false });\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      // animation={false}\r\n      show={proState.showProductEditModal}\r\n      onHide={() =>\r\n        proDispatch({ type: \"showProductEditModal\", payload: false })\r\n      }\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>Edit Product</Modal.Title>\r\n      </Modal.Header>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={onSubmit}\r\n        enableReinitialize={true}\r\n      >\r\n        {({\r\n          handleChange,\r\n          handleSubmit,\r\n          errors,\r\n          isSubmitting,\r\n\r\n          touched,\r\n          values,\r\n        }) => {\r\n          return (\r\n            <Form className=\"py-4\">\r\n              <Modal.Body className=\"p-4\">\r\n                <Form.Control\r\n                  type=\"hidden\"\r\n                  name=\"id\"\r\n                  value={values.id}\r\n                  onChange={handleChange(\"id\")}\r\n                />\r\n                {/* Product name */}\r\n                <Form.Group className=\"pb-3\" controlId=\"productName\">\r\n                  <Form.Label>Name</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Enter product name\"\r\n                    name=\"name\"\r\n                    value={values.name}\r\n                    onChange={handleChange(\"name\")}\r\n                  />\r\n                  {touched.name && errors.name ? (\r\n                    <Form.Text className=\"text-danger\">{errors.name}</Form.Text>\r\n                  ) : null}\r\n                </Form.Group>\r\n\r\n                {/* Product price */}\r\n                <Form.Group className=\"pb-3\" controlId=\"productPrice\">\r\n                  <Form.Label>Price (GH¢)</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Enter price\"\r\n                    name=\"price\"\r\n                    value={values.price}\r\n                    onChange={handleChange(\"price\")}\r\n                    onError={(e) => alert(e)}\r\n                  />\r\n                  {touched.price && errors.price ? (\r\n                    <Form.Text className=\"text-danger\">\r\n                      {errors.price}\r\n                    </Form.Text>\r\n                  ) : null}\r\n                </Form.Group>\r\n\r\n                {/* Product quantity */}\r\n                <Form.Group className=\"pb-3\" controlId=\"productName\">\r\n                  <Form.Label>Quantity</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Enter quantity\"\r\n                    name=\"quantity\"\r\n                    value={values.quantity}\r\n                    onChange={handleChange(\"quantity\")}\r\n                  />\r\n                  {touched.quantity && errors.quantity ? (\r\n                    <Form.Text className=\"text-danger\">\r\n                      {errors.quantity}\r\n                    </Form.Text>\r\n                  ) : null}\r\n                </Form.Group>\r\n\r\n                <Form.Group\r\n                  className=\"pb-3\"\r\n                  controlId=\"exampleForm.ControlSelect1\"\r\n                >\r\n                  <Form.Label>Suppliers</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    value={values.supplier}\r\n                    onChange={handleChange(\"supplier\")}\r\n                  >\r\n                    <option>Select supplier...</option>\r\n                    {suppData?.data?.map((item, index) => {\r\n                      return (\r\n                        <option key={index + 1} value={item.name}>\r\n                          {item.name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </Form.Control>\r\n                  {touched.supplier && errors.supplier ? (\r\n                    <Form.Text className=\"text-danger\">\r\n                      {errors.supplier}\r\n                    </Form.Text>\r\n                  ) : null}\r\n                </Form.Group>\r\n              </Modal.Body>\r\n\r\n              <Modal.Footer>\r\n                <Button\r\n                  style={{ background: \"#e2ad0e\", borderColor: \"#e2ad0e\" }}\r\n                  variant=\"dark\"\r\n                  type=\"submit\"\r\n                  onClick={handleSubmit}\r\n                  disabled={isSubmitting}\r\n                >\r\n                  {isSubmitting ? (\r\n                    <>\r\n                      <span>Please Wait... </span>\r\n                      <span className=\"spinner-border spinner-border-sm\"></span>\r\n                    </>\r\n                  ) : (\r\n                    \"Save Changes\"\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  variant=\"light\"\r\n                  onClick={() =>\r\n                    proDispatch({\r\n                      type: \"showProductEditModal\",\r\n                      payload: false,\r\n                    })\r\n                  }\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ProductEdit;\r\n","import { Modal } from \"react-bootstrap\";\r\n\r\nfunction ProductView({ product, setProViewData }) {\r\n  return (\r\n    <Modal\r\n    as=\"div\"\r\n      keyboard\r\n      animation\r\n      show={product.visible}\r\n      onHide={(prev) =>\r\n        setProViewData({\r\n          ...prev,\r\n          visible: false,\r\n        })\r\n      }\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title> Product Details</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p className=\"fw-bold text-primary\">Name </p>\r\n        <p className=\"lead\">{product.name}</p>\r\n        <p className=\"fw-bold text-primary\">Price </p>\r\n        <p className=\"lead\">{product.price}</p>\r\n        <p className=\"fw-bold text-primary\">Quantity </p>\r\n        <p className=\"lead\">{product.quantity}</p>\r\n        <p className=\"fw-bold text-primary\">Supplier </p>\r\n        <p className=\"lead\">{product.supplier}</p>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ProductView;\r\n","import React, { useContext, useState, useRef, useEffect } from \"react\";\r\nimport $ from \"jquery\";\r\nimport { Button, Card, Stack } from \"react-bootstrap\";\r\nimport { useQuery, useMutation, useQueryClient } from \"react-query\";\r\nimport { deleteProduct, getAllProducts } from \"../../api\";\r\nimport { productColumns } from \"../../data\";\r\nimport { ProductContext } from \"../../context/products/ProductProvider\";\r\nimport ProductEdit from \"../modals/ProductEdit\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ProductView from \"../modals/ProductView\";\r\nimport { IoAddCircleOutline } from \"react-icons/io5\";\r\n\r\nfunction ProductTables() {\r\n  const navigate = useNavigate();\r\n  const tableRef = useRef(null);\r\n  const [proEditData, setProEditData] = useState();\r\n  const [proViewData, setProViewData] = useState({\r\n    visible: false,\r\n    name: \"\",\r\n    price: \"\",\r\n    quantity: \"\",\r\n    supplier: \"\",\r\n  });\r\n  const { proState, proDispatch } = useContext(ProductContext);\r\n\r\n  const queryClient = useQueryClient();\r\n  const { mutateAsync } = useMutation(deleteProduct);\r\n\r\n  const data = useQuery(\"products\", getAllProducts, {\r\n    staleTime:15000,\r\n    cacheTime:3000,\r\n    onSuccess: (data) => {\r\n      proDispatch({ type: \"productsDetails\", payload: data });\r\n    },\r\n    onError: () => {\r\n      navigate(\"/error\", { replace: true });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // @View Supplier\r\n    const handleView = (rowData) => {\r\n      setProViewData({\r\n        visible: true,\r\n        name: rowData.name,\r\n        price: rowData.price,\r\n        quantity: rowData.quantity,\r\n        supplier: rowData.supplier,\r\n      });\r\n    };\r\n\r\n    // @Edit Supplier\r\n    const handleEdit = (rowData) => {\r\n      setProEditData(rowData);\r\n      proDispatch({ type: \"showProductEditModal\", payload: true });\r\n    };\r\n\r\n    // @Delete Supplier\r\n    const handleDelete = (rowId) => {\r\n      mutateAsync(rowId, {\r\n        onSuccess: (data) => {\r\n          alert(\"Data Deleted\");\r\n          queryClient.invalidateQueries(\"products\");\r\n        },\r\n      });\r\n    };\r\n\r\n    $(`#${tableRef.current.id}`).DataTable({\r\n      scrollY: 400,\r\n      scrollX: true,\r\n      scrollCollapse: true,\r\n      fixedHeader: true,\r\n      bInfo: false,\r\n      scrollResize: true,\r\n      destroy: true,\r\n      responsive: true,\r\n      buttons: [\"pdf\", \"excel\", \"copy\"],\r\n      data: data ? data.data : [],\r\n      columnDefs: [\r\n        {\r\n          orderable: false,\r\n          className: \"select-checkbox\",\r\n          targets: [-2],\r\n        },\r\n      ],\r\n      select: {\r\n        style: \"multi\",\r\n        selector: \"td:first-child\",\r\n      },\r\n      order: [[1, \"asc\"]],\r\n      columns: productColumns(handleView, handleEdit, handleDelete),\r\n    });\r\n  }, [data, queryClient, mutateAsync, proDispatch]);\r\n\r\n  return (\r\n    <>\r\n      <Card className=\"shadow\">\r\n        <Card.Header className=\"d-flex align-items-center justify-content-between text-dark flex-wrap\">\r\n          <Stack\r\n            direction=\"horizontal\"\r\n            className=\"products-details-container pt-3\"\r\n            gap={4}\r\n          >\r\n            <p className=\"position-relative me-3  \">\r\n              Products\r\n              <span className=\"bg-success text-white position-absolute right-0 bottom-50 badge badge-primary p-2 \">\r\n                {proState.noOfProduct}\r\n              </span>\r\n            </p>\r\n            <p className=\"position-relative me-3\">\r\n              Low Stock\r\n              <span className=\"bg-dark text-white position-absolute right-0 bottom-50 badge badge-primary p-2\">\r\n                {proState.lowStock}\r\n              </span>\r\n            </p>\r\n            <p className=\"position-relative me-3\">\r\n              Out of Stock\r\n              <span className=\"bg-danger text-white position-absolute right-0 bottom-50 badge badge-primary p-2 \">\r\n                {proState.outOfStock}\r\n              </span>\r\n            </p>\r\n          </Stack>\r\n          <Button\r\n            className=\"rounded-1\"\r\n            variant=\"primary\"\r\n            onClick={() =>\r\n              proDispatch({ type: \"showProductModal\", payload: true })\r\n            }\r\n          >\r\n            <IoAddCircleOutline />\r\n            Create New\r\n          </Button>\r\n        </Card.Header>\r\n        <Card.Body className=\"p-sm-2 p-md-4\">\r\n          <table\r\n            width={\"100%\"}\r\n            id=\"product-table\"\r\n            ref={tableRef}\r\n            className=\"table table-sm table-responsive table-hover table bordered\"\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>Id</th>\r\n                <th>Name</th>\r\n                <th>Price</th>\r\n                <th>Quantity</th>\r\n                <th>Supplier</th>\r\n                <th>Action</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody></tbody>\r\n          </table>\r\n        </Card.Body>\r\n      </Card>\r\n      <ProductView product={proViewData} setProViewData={setProViewData} />\r\n      <ProductEdit data={proEditData} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(ProductTables);\r\n"],"names":["_ref","data","queryClient","useQueryClient","_useContext","useContext","ProductContext","proState","proDispatch","suppData","useQuery","getAllSuppliers","initialValues","id","name","price","quantity","supplier","validationSchema","Yup","shape","required","min","positive","integer","mutateAsync","useMutation","putProduct","onMutate","updatedProduct","oldProducts","getQueryData","setQueryData","concat","_toConsumableArray","onSettled","invalidateQueries","_jsxs","Modal","show","showProductEditModal","onHide","type","payload","children","_jsx","Formik","onSubmit","values","options","onSuccess","setSubmitting","alert","enableReinitialize","_ref2","_suppData$data","handleChange","handleSubmit","errors","isSubmitting","touched","Form","className","value","onChange","controlId","placeholder","onError","e","as","map","item","index","Button","style","background","borderColor","variant","onClick","disabled","_Fragment","product","setProViewData","keyboard","animation","visible","prev","_objectSpread","closeButton","ProductTables","navigate","useNavigate","tableRef","useRef","_useState","useState","_useState2","_slicedToArray","proEditData","setProEditData","_useState3","_useState4","proViewData","deleteProduct","getAllProducts","staleTime","cacheTime","replace","useEffect","$","current","DataTable","scrollY","scrollX","scrollCollapse","fixedHeader","bInfo","scrollResize","destroy","responsive","buttons","columnDefs","orderable","targets","select","selector","order","columns","productColumns","rowData","rowId","Card","Stack","direction","gap","noOfProduct","lowStock","outOfStock","IoAddCircleOutline","width","ref","ProductView","ProductEdit","React"],"sourceRoot":""}